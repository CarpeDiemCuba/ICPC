/*
https://codeforces.com/problemset/problem/546/E

E. Soldier and Traveling
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
In the country there are n cities and m bidirectional roads between them. Each city has an army. Army of the i-th city consists of ai soldiers. Now soldiers roam. After roaming each soldier has to either stay in his city or to go to the one of neighboring cities by at moving along at most one road.

Check if is it possible that after roaming there will be exactly bi soldiers in the i-th city.

Input
First line of input consists of two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 200).

Next line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100).

Next line contains n integers b1, b2, ..., bn (0 ≤ bi ≤ 100).

Then m lines follow, each of them consists of two integers p and q (1 ≤ p, q ≤ n, p ≠ q) denoting that there is an undirected road between cities p and q.

It is guaranteed that there is at most one road between each pair of cities.

Output
If the conditions can not be met output single word "NO".

Otherwise output word "YES" and then n lines, each of them consisting of n integers. Number in the i-th line in the j-th column should denote how many soldiers should road from city i to city j (if i ≠ j) or how many soldiers should stay in city i (if i = j).

If there are several possible answers you may output any of them.

Examples
inputCopy
4 4
1 2 6 3
3 5 3 1
1 2
2 3
3 4
4 2
outputCopy
YES
1 0 0 0 
2 0 0 0 
0 5 1 0 
0 0 2 1 
inputCopy
2 0
1 2
2 1
outputCopy
NO


*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define flow_type long long

const int maxn = 105;
const int oo = 1e5;

namespace max_flow{
    const int M=300,oo=(1<<28);
    vector<int>g[M];//grafo
    //p[i][j] capacidad de la arista (i,j), r[i][j] camino residual
    int r[M][M],p[M][M],path[M],q[M*2],q2[M*2];
    bool mar[M];
    void init(){
        for(int i = 0; i < M; i++)g[i].clear();
        memset(p, 0, sizeof(p));
    }
    void add(int a,int b,int v){
        g[a].push_back(b);p[a][b]=v;
	}
    int bfs(int no,int nof){
        int beg=0,end=0;
        q[end]=no;q2[end++]=oo;
        memset(mar, 0, sizeof(mar));
        mar[no]=1;
        while(beg!=end){
            int nn=q[beg],pp=q2[beg++],i;
            for(int i = 0; i < g[nn].size(); i++){
                int hi=g[nn][i],cc=p[nn][hi]-r[nn][hi];
                if(cc>0&&!mar[hi]){
                    mar[hi]=1;path[hi]=nn;
                    if(hi==nof)return min(pp,cc);
                    q[end]=hi;q2[end++]=min(pp,cc);
                }
            }
        }
        return 0;
    }
    int flow(int ini,int fin){
        int sol=0,val,po;
        memset(r, 0, sizeof(r));

        path[ini]=-1;
        while(val=bfs(ini,fin)){
            sol+=val;po=fin;
            while(path[po]!=-1){
                r[path[po]][po]+=val;
                r[po][path[po]]-=val;
                po=path[po];
            }
        }
        return sol;
    }
}

void adiciona(int a, int b, int c){
    max_flow::add(a, b, c);
    max_flow::add(b, a, 0);
    return;
}

int main()
{
//    freopen(".in", "r", stdin);

    int N, M; scanf("%d%d", &N, &M);


    int fuente = N * 2 + 1;
    int sumidero = N * 2 + 2;

    int s1 = 0, s2 = 0;

    for(int i = 1; i <= N; i++){
        int a; scanf("%d", &a);
        adiciona(fuente, i, a);
        adiciona(i, i+N, oo);

        s1 += a;
    }
    for(int i = 1; i <= N; i++){
        int a; scanf("%d", &a);
        adiciona(i+N, sumidero, a);
        s2 += a;
    }

    if(s1 - s2){
        cout << "NO\n";
        return 0;
    }

    for(int i = 1; i <= M; i++){
        int a, b; scanf("%d%d", &a, &b);
//        D.add_edge(a, b + N, oo);
        adiciona(a, b + N, oo );
        adiciona(b, a + N, oo );
//        D.add_edge(b, a + N, oo);
    }

    int flujo = max_flow::flow(fuente, sumidero);
    if(flujo == s1){
        printf("YES\n");
        for(int i = 1; i <= N; i++){
            for(int j = 1; j <= N; j++){
                cout << max_flow::r[i][j+N]<< " ";
            }
            cout << "\n";
        }
    }else printf("NO\n");




    return 0;
}
