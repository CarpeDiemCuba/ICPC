/*
https://codeforces.com/problemset/problem/1423/B

B. Valuable Paper
time limit per test2 seconds
memory limit per test256 megabytes
inputstandard input
outputstandard output
The pandemic is upon us, and the world is in shortage of the most important resource: toilet paper. As one of the best prepared nations for this crisis, BubbleLand promised to help all other world nations with this valuable resource. To do that, the country will send airplanes to other countries carrying toilet paper.

In BubbleLand, there are N toilet paper factories, and N airports. Because of how much it takes to build a road, and of course legal issues, every factory must send paper to only one airport, and every airport can only take toilet paper from one factory.

Also, a road can't be built between all airport-factory pairs, again because of legal issues. Every possible road has number d given, number of days it takes to build that road.

Your job is to choose N factory-airport pairs, such that if the country starts building all roads at the same time, it takes the least amount of days to complete them.

Input
The first line contains two integers N (1≤N≤104) - number of airports/factories, and M (1≤M≤105) - number of available pairs to build a road between.

On next M lines, there are three integers u, v (1≤u,v≤N), d (1≤d≤109) - meaning that you can build a road between airport u and factory v for d days.

Output
If there are no solutions, output -1. If there exists a solution, output the minimal number of days to complete all roads, equal to maximal d among all chosen roads.

Example
inputCopy
3 5
1 2 1
2 3 2
3 3 3
2 1 4
2 2 5
outputCopy
4
*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define bi pair<int, int>
#define tri pair<bi, int>
#define f first
#define s second
#define mkp make_pair

struct FlowEdge {
    int v, u;
    long long cap, flow = 0;
    FlowEdge(int v, int u, long long cap) : v(v), u(u), cap(cap) {}
};

struct Dinic {
    const long long flow_inf = 1e18;
    vector<FlowEdge> edges;
    vector<vector<int>> adj;
    int n, m = 0;
    int s, t;
    vector<int> level, ptr;
    queue<int> q;

    Dinic(int n, int s, int t) : n(n), s(s), t(t) {
        adj.resize(n);
        level.resize(n);
        ptr.resize(n);
    }

    void add_edge(int v, int u, long long cap) {
        edges.emplace_back(v, u, cap);
        edges.emplace_back(u, v, 0);
        adj[v].push_back(m);
        adj[u].push_back(m + 1);
        m += 2;
    }

    bool bfs() {
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (int id : adj[v]) {
                if (edges[id].cap - edges[id].flow < 1)
                    continue;
                if (level[edges[id].u] != -1)
                    continue;
                level[edges[id].u] = level[v] + 1;
                q.push(edges[id].u);
            }
        }
        return level[t] != -1;
    }

    long long dfs(int v, long long pushed) {
        if (pushed == 0)
            return 0;
        if (v == t)
            return pushed;
        for (int& cid = ptr[v]; cid < (int)adj[v].size(); cid++) {
            int id = adj[v][cid];
            int u = edges[id].u;
            if (level[v] + 1 != level[u] || edges[id].cap - edges[id].flow < 1)
                continue;
            long long tr = dfs(u, min(pushed, edges[id].cap - edges[id].flow));
            if (tr == 0)
                continue;
            edges[id].flow += tr;
            edges[id ^ 1].flow -= tr;
            return tr;
        }
        return 0;
    }

    long long flow() {
        long long f = 0;
        while (true) {
            fill(level.begin(), level.end(), -1);
            level[s] = 0;
            q.push(s);
            if (!bfs())
                break;
            fill(ptr.begin(), ptr.end(), 0);
            while (long long pushed = dfs(s, flow_inf)) {
                f += pushed;
            }
        }
        return f;
    }
};

map<string, int > Mp;
map<int, string > Map;

int f(string a, int b){
    string sol = "";

    int c = 1;
    int len = a.size();
    cik(i, 0, len - 1, 1){
        if(a[i] == ',') {c++;continue;}

        if(c == b){
            sol += a[i];
        }
    }
    return Mp[sol];
}

vector<tri > V;
vector<int > P;
set<int> S;
int N, M;
int fuente, sumidero;


int crea_grafo_dime_flujo(int v){
    Dinic D = Dinic(2 * N + 3, fuente, sumidero);

    cik(i, 1, N, 1){
        D.add_edge(fuente, i, 1);
    }
    cik(i, 0, M - 1, 1){
        int a, b, c;
        a = V[i].f.f;
        b = V[i].f.s;
        c = V[i].s;

        if(c <= v){
            D.add_edge(a, b + N, 1);
        }
    }
    cik(i, 1, N, 1){
        D.add_edge(i + N, sumidero, 1);
    }

    return D.flow();
}

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0);


    cin >> N >> M;

    cik(i, 1, M, 1){
        int a, b, c;
        cin >> a >> b >> c;

        V.push_back(mkp(mkp(a, b), c));
        S.insert(c);
    }

    set<int> :: iterator it = S.begin();

    for(;it != S.end(); it++){
        P.push_back(*it);
    }

    fuente = 2 * N + 1, sumidero = 2 * N + 2;
    int ini = 0, fin = P.size(); fin -= 1;
    int Sol = P[fin];

    if(crea_grafo_dime_flujo(Sol) < N) {
        cout << "-1\n"; return 0;
    }


    while(ini + 3 <= fin){
        int mit = (ini + fin) >> 1;

        int v = P[mit];

        int K = crea_grafo_dime_flujo(v);

        if(K == N){
            fin = mit;
        }
        else {
            ini = mit + 1;
        }
    }

    for(;ini <= fin; ini++){
        int v = P[ini];

        int K = crea_grafo_dime_flujo(v);

        if(K == N){
            Sol = v;break;
        }
    }

    cout << Sol << "\n";





    return 0;
}
