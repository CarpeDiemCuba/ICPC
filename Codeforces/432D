/*
https://vjudge.net/problem/CodeForces-432D/origin

D. Prefixes and Suffixes
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
You have a string s = s1s2...s|s|, where |s| is the length of string s, and si its i-th character.

Let's introduce several definitions:

A substring s[i..j] (1 ≤ i ≤ j ≤ |s|) of string s is string sisi + 1...sj.
The prefix of string s of length l (1 ≤ l ≤ |s|) is string s[1..l].
The suffix of string s of length l (1 ≤ l ≤ |s|) is string s[|s| - l + 1..|s|].
Your task is, for any prefix of string s which matches a suffix of string s, print the number of times it occurs in string s as a substring.

Input
The single line contains a sequence of characters s1s2...s|s| (1 ≤ |s| ≤ 105) — string s. The string only consists of uppercase English letters.

Output
In the first line, print integer k (0 ≤ k ≤ |s|) — the number of prefixes that match a suffix of string s. Next print k lines, in each line print two integers li ci. Numbers li ci mean that the prefix of the length li matches the suffix of length li and occurs in string s as a substring ci times. Print pairs li ci in the order of increasing li.

Examples
inputCopy
ABACABA
outputCopy
3
1 4
3 2
7 1
inputCopy
AAA
outputCopy
3
1 3
2 2
3 1



*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))

const int maxn = 2e5 + 5;

int Z[maxn]; //Z[i] prefijo de la subcadena [i, n] con la original
string S;
int n;
void zAlg()
{
    n = S.size();
	int i,g,f;
    Z[g=0]=n;
    for(i=1;i<n;++i) {
    	if(i<g && Z[i-f]!=(g-i))
    		Z[i]=min(Z[i-f],g-i);
        else{
            g=max(g,f=i);
            while(g<n && S[g]==S[g-f])
            	++g;
			Z[i]=g-f;
        }
    }
}

int M[maxn];


int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0);

//    freopen(".in", "r", stdin);

    cin >> S;

    zAlg();

    cik(i, 0, n - 1, 1){
        int k = Z[i];
        M[k] ++;
    }

    int last = 0, Sol = 0;;
    for(int i = n; i > 0; i--){
        if(M[i]){
            M[i] += last;
            last = M[i];
            if(Z[n-i] == i)
            Sol++;
        }
    }

    cout << Sol << "\n";
    cik(i, 1, n, 1){
        if(M[i] && Z[n-i]==i)
        cout << i << " " << M[i] << "\n";
    }


    return 0;
}
