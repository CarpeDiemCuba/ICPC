/*
https://www.spoj.com/problems/LCS/

LCS - Longest Common Substring
no tags 

A string is finite sequence of characters over a non-empty finite set Σ.

In this problem, Σ is the set of lowercase letters.

Substring, also called factor, is a consecutive sequence of characters occurrences at least once in a string.

Now your task is simple, for two given strings, find the length of the longest common substring of them.

Here common substring means a substring of two or more strings.

Input
The input contains exactly two lines, each line consists of no more than 250000 lowercase letters, representing a string.

Output
The length of the longest common substring. If such string doesn't exist, print "0" instead.

Example
Input:
alsdfkjfjkdsal
fdjskalajfkdsla

Output:
3
*/

//Suffix Arrays

#include <stdio.h>
#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>
#include <stack>
#include <string.h>
#include <ctype.h>
 
typedef long long ll;
 
const int  MAXN  = 2e6 + 5;
 
#define FOR(i,n) for(int i=0;i<n;i++)
 
inline bool leq(int a1, int a2, int b1, int b2) // lexicographic order
{ return(a1 < b1 || a1 == b1 && a2 <= b2); } // for pairs
inline bool leq(int a1, int a2, int a3, int b1, int b2, int b3)
{ return(a1 < b1 || a1 == b1 && leq(a2,a3, b2,b3)); } // and triples
 
 
// stably sort a[0..n-1] to b[0..n-1] with keys in 0..K from r
void radixPass(int* a, int* b, int* r, int n, int K){
    int* c = new int[K + 1];
    FOR(i,K+1) c[i] = 0;
    FOR(i,n) c[r[a[i]]]++;
    int sum = 0;
    FOR(i,K+1){
        int t = c[i]; c[i] = sum; sum += t;
    }
    FOR(i,n) b[c[r[a[i]]]++] = a[i];
    delete[] c;
}
#define GetI() (SA12[t]<n0?SA12[t]*3+1:(SA12[t]-n0)*3+2)
 
void suffixArray(int* s, int* SA, int n, int K=128){
    s[n] = s[n+1] = s[n+2] = 0;
    int n0=(n+2)/3, n1=(n+1)/3, n2=n/3, n02=n0+n2,j=0;
    int* s12 = new int[n02+3];
    s12[n02] = s12[n02+1] = s12[n02+2] = 0;
    int* SA12 = new int[n02+3];
    SA12[n02] = SA12[n02+1] = SA12[n02+2] = 0;
    int* s0 = new int[n0];
    int* SA0 = new int[n0];
    FOR(i,n+(n0-n1)) if (i % 3 != 0) s12[j++]=i;
    radixPass(s12, SA12, s + 2, n02, K);
    radixPass(SA12, s12, s + 1, n02, K);
    radixPass(s12, SA12, s, n02, K);
    int name = 0, c0 = -1, c1 = -1, c2 = -1;
    FOR(i,n02){
        if (s[SA12[i]]!=c0 || s[SA12[i]+1]!=c1 || s[SA12[i]+2]!=c2) {
            name++;
            c0 = s[SA12[i]];
            c1 = s[SA12[i] + 1];
            c2 = s[SA12[i] + 2];
        }
        if (SA12[i] % 3 == 1) {
            s12[SA12[i] / 3] = name;
        } else {
            s12[SA12[i] / 3 + n0] = name;
        }
    }
    if (name < n02) {
        suffixArray(s12, SA12, n02, name);
        FOR(i,n02) s12[SA12[i]]=i+1;
    } else {
        FOR(i,n02)
                              SA12[s12[i] - 1] = i;
    }
    j = 0;
    FOR(i,n02)
    if (SA12[i] < n0)
        s0[j++] = 3 * SA12[i];
    radixPass(s0, SA0, s, n0, K);
    int p = 0;
    int t = n0 - n1;
    FOR(k,n) {
        int i = GetI(), j = SA0[p];
        if (SA12[t]<n0?leq(s[i],s12[SA12[t]+n0], s[j],s12[j/3]):leq(s[i],s[i+1],s12[SA12[t]-n0+1], s[j],s[j+1],s12[j/3+n0])){
            SA[k] = i; t++;
            if (t == n02){
                for (k++; p<n0; p++, k++)
                    SA[k] = SA0[p];
            }
        } else {
            SA[k] = j; p++;
            if (p == n0) {
                for (k++; t < n02; t++, k++)
                    SA[k] = GetI();
            }
        }
    }
    delete[] s12; delete[] SA12;
    delete[] SA0; delete[] s0;
}
// h[i] = length of the longest common prefix of
//suffix pos[i] and suffix pos[i-1]
void findLCP(int* s, int* sa, int *rank, int *h, int n) {
    FOR(i,n) rank[sa[i]] = i;
    h[0] = 0; int k = 0;
    FOR(i,n){
        if (rank[i]>0){
            int j = sa[rank[i]-1];
            while (i+k<n && j+k<n && s[i+k]==s[j+k]) k++;
            h[rank[i]]=k; k-=(k>0);
        }
    }
}
 
char cad[MAXN];
int n,m,i,num[MAXN],LCP[MAXN],rank[MAXN],SA[MAXN],sol,pos;
int main(){
    //freopen("/home/unlimited/Escritorio/FOC/7.in","r",stdin);
    scanf("%s",cad);
    n = strlen(cad);
    cad[n] = '$';
    scanf("%s",cad+n+1);
    m=n+n+1;
    for(i=0;i<m;i++)
        num[i]=cad[i];
    suffixArray(num,SA,m);
    findLCP(num,SA,rank,LCP,m);
    sol = 0;
    for(i=1;i<m;i++)
        if ((SA[i] < n && SA[i-1]>n) || (SA[i-1]<n && SA[i]>n))
            if (sol == -1 || sol < LCP[i]){
                sol = LCP[i];
                pos = SA[i];
            }
    printf("%d\n", sol);
 
    return 0;
}
 
