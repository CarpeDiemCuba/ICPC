/*
https://www.spoj.com/problems/NUMTSN/

NUMTSN - 369 Numbers
no tags 

7. 369 numbers

A number is said to be a 369 number if

The count of 3s is equal to count of 6s and the count of 6s is equal to count of 9s.
The count of 3s is at least 1.
For Example 12369, 383676989, 396 all are 369 numbers whereas 213, 342143, 111 are not.

Given A and B find how many 369 numbers are there in the interval [A, B]. Print the answer modulo 1000000007.

Input

The first line contains the number of test cases (T) followed by T lines each containing 2 integers A and B.

Output

For each test case output the number of 369 numbers between A and B inclusive.

Constraints

T<=100

1<=A<=B<=10^50

Sample Input

3

121 4325

432 4356

4234 4325667

Sample Output

60

58

207159

 

*/

/*
DP problem
*/


#include <bits/stdc++.h>
 
using namespace std;
 
#define ll long long
#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
 
const int maxn = 55;
const ll mod = 1e9 + 7;
 
ll dp[maxn][maxn][maxn][maxn];
bool B[maxn][maxn][maxn][maxn];
 
ll solve_dp(int len, int c3, int c6, int c9){
    if(len == 0){
        return ((c3 == c6) && (c3 == c9) && c3);
    }
 
    if(B[len][c3][c6][c9]){
        return dp[len][c3][c6][c9];
    }
 
    B[len][c3][c6][c9] = true;
    cik(i, 0, 9, 1){
        dp[len][c3][c6][c9] += solve_dp(len - 1, c3 + (i==3), c6 + (i == 6), c9 + (i==9));
        dp[len][c3][c6][c9] %= mod;
    }
    return dp[len][c3][c6][c9];
}
 
ll query(string a){
    ll Sol = 0;
 
    int len = a.size();
    int c3, c6, c9;
    c3 = c6 = c9 = 0;
    cik(i, 0, len - 1, 1){
        int val = a[i] - '0' - 1;
        cik(j, 0, val, 1){
            Sol += solve_dp(len - (i + 1), c3 + (j == 3), c6 + (j == 6), c9 + (j == 9));
            Sol %= mod;
        }
        val++;
        c3 += (val == 3);
        c6 += (val == 6);
        c9 += (val == 9);
    }
    return Sol;
}
 
bool ok(string a){
    int c3, c6, c9;
    c3 = c6 = c9 = 0;
 
    int len = a.size();
    cik(i, 0, len - 1, 1){
        c3 += (a[i] == '3');
        c6 += (a[i] == '6');
        c9 += (a[i] == '9');
    }return ((c3 == c6) && (c6 == c9) && c3);
}
 
int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0);
 
    int T; cin >> T;
 
    cik(t, 1, T, 1){
        string a, b; cin >> a >> b;
 
        cout << ((query(b) - query(a) + mod ) % mod + ok(b)) % mod << "\n";
    }
 
    return 0;
}
 
