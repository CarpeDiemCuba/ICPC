/*
https://www.spoj.com/problems/QUERYSTR/en/


QUERYSTR - Query Problem
no tags 

McFn interested in string problem recently. He found a interesting function and he felt he could use this function to invent a new match algorithm.

For a string S [1 ... n] and i ¡Ê [1, n], define F (i) is the length of the longest common suffix of S and S [1 ... i].
For example, for the string S [1 ... 11] = zaaxbaacbaa, then F (1) = 0, F (2) = 1, F (3) = 2 (note that S [1 ... 3] = zaa), F (4) = 0, ... ... F (10) = 1, F (11) = 11;
For the string S [1 ... n], i ¡Ê [1, n], S [i ... n] is its suffix;

Input
The first line is a integer T.the number of test cases
for each test case
The first line is a string S, composed of only lowercase letters,  len (s) is the length of s,  1 <= len (s) <= 1000000;
Next line, a number N (1 <= N <= 100000), denote that the number of queries;
The next N lines, each line contains a number x (1 <= x <= len (s)).

Output
For each x the output F (x);

Example
Input:
1
zaaxbaacbaa
11
1
2
3
4
5
6
7
8
9
10
11

Output:
0
1
2
0
0
1
3
0
0
1
11
*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))

const int maxn = 1e6 + 5;

int Z[maxn]; //Z[i] prefijo de la subcadena [i, n] con la original
string S;
int n;
void zAlg()
{
	int i,g,f;
    Z[g=0]=n;
    for(i=1;i<n;++i) {
    	if(i<g && Z[i-f]!=(g-i))
    		Z[i]=min(Z[i-f],g-i);
        else{
            g=max(g,f=i);
            while(g<n && S[g]==S[g-f])
            	++g;
			Z[i]=g-f;
        }
    }
}


int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0);

    //freopen(".in", "r", stdin);

    int T; cin >> T; cik(t, 1, T, 1){
        string A; cin >> A;

        S = A;
        reverse(A.begin(), A.end());

        int l = S.size();

        S = A ;

        n = S.size();
        zAlg();

//        cik(i,0, n - 1, 1) cout << Z[i] << " ";

        int N; cin >> N;

        cik(i, 1, N, 1){
            int a; cin >> a; cout << Z[n-a] << "\n";
        }

    }


    return 0;
}
