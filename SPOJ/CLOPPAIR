/*
https://vjudge.net/problem/SPOJ-CLOPPAIR/origin



CLOPPAIR - Closest Point Pair
#geometry

You are given N points on a plane and your task is to find a pair of points with the smallest Euclidean distance between them.

All points will be unique and there is only one pair with the smallest distance.

Input
First line of input will contain N (2<=N<=50000) and then N lines follow each line contains two integers giving the X and Y coordinate of the point. Absolute value of X,Y will be at most 10^6.

Output
Output 3 numbers a b c, where a, b (a<b) are the indexes (0 based) of the point pair in the input and c is the distance between them. Round c to 6 decimal digits.

See samples for more clarification.

Input: 
5 
0 0
0 1
100 45
2 3
9 9

Output: 
0 1 1.000000
Input: 
5
0 0
-4 1
-7 -2
4 5
1 1

Output: 
0 4 1.414214

*/

#pragma GCC optimize ("O3")
#pragma GCC target ("sse4")

#include<bits/stdc++.h>
using namespace std;
#define int long long
using ll = long long;
using ld = long double;
using db = double; 
using str = string; // python!

using pi = pair<int,int>;
using pl = pair<ll,ll>;
using pd = pair<db,db>;

using vi = vector<int>;
using vb = vector<bool>;
using vl = vector<ll>;
using vd = vector<db>;
using vs = vector<str>;
using vpi = vector<pi>;
using vpl = vector<pl>;
using vpd = vector<pd>;  

// pairs
#define mp make_pair
#define f first
#define s second

// vectors
#define sz(x) (int)(x).size()
#define all(x) begin(x), end(x)
#define rall(x) (x).rbegin(), (x).rend() 
#define rsz resize
#define ins insert 
#define ft front() 
#define bk back()
#define pf push_front 
#define pb push_back
#define eb emplace_back 
#define lb lower_bound 
#define ub upper_bound 

// loops
#define FOR(i,a,b) for (int i = (a); i < (b); ++i)
#define F0R(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i,a) ROF(i,0,a)
#define trav(a,x) for (auto& a: x)

const int MX  = 2e5+5; 
const int MOD = 1e9+7; // 998244353;
const ll  INF = 1e18;  // not too close to LLONG_MAX
const ld  PI  = acos((ld)-1);
const ld  EPS = 1e-9;
const int xd[4] = {1,0,-1,0}, yd[4] = {0,1,0,-1}; // for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count()); 

// helper funcs
constexpr int pct(int x) { return __builtin_popcount(x); } // # of bits set
constexpr int bits(int x) { return 31-__builtin_clz(x); } // floor(log2(x)) 
template<class T> T cdiv(T a, T b) { return a/b+((a^b)>0&&a%b); } // divide a by b rounded up
template<class T> T fdiv(T a, T b) { return a/b-((a^b)<0&&a%b); } // divide a by b rounded down

template<class T> bool ckmin(T& a, const T& b) { 
	return b < a ? a = b, 1 : 0; } // set a = min(a,b)
template<class T> bool ckmax(T& a, const T& b) { 
	return a < b ? a = b, 1 : 0; } // set a = max(a,b)

template<class T, class F> T fstTrue(T lo, T hi, F f) {
	lo--; assert(lo <= hi); // assuming f is decreasing
	while (lo < hi) { // find first index such that f is true 
		T mid = lo+(hi-lo+1)/2;
		f(mid) ? lo = mid : hi = mid-1;
	} 
	return lo;
}
template<class T, class F> T lstTrue(T lo, T hi, F f) {
	hi++; assert(lo <= hi); // assuming f is increasing
	while (lo < hi) { // find first index such that f is true 
		T mid = lo+(hi-lo)/2;
		f(mid) ? hi = mid : lo = mid+1; 
	} 
	return lo;
}

template<class T> void remDup(vector<T>& v) { // sort and remove duplicates
	sort(all(v)); v.erase(unique(all(v)),end(v)); }
template<class T, class U>  void erase(T& t, const U& u) { // don't erase
	auto it = t.find(u); assert(it != end(t));
	t.erase(u); } // element that doesn't exist from (multi)set

// DEBUG
void DBG() { cerr << "]" << endl; }
template<class H, class... T> void DBG(H h, T... t) {
	cerr << h; if (sizeof...(t)) cerr << ", ";
	DBG(t...); }
#ifdef LOCAL // compile with -DLOCAL, chk -> fake assert
	#define dbg(...) cerr << "Line(" << __LINE__ << ") -> [" << #__VA_ARGS__ << "]: [", DBG(__VA_ARGS__)
	#define chk(...) if (!(__VA_ARGS__)) cerr << "Line(" << __LINE__ << ") -> function(" \
		 << __FUNCTION__  << ") -> CHK FAILED: (" << #__VA_ARGS__ << ")" << "\n", exit(0);
#else
	#define dbg(...) 0
	#define chk(...) 0
#endif

// FILE I/O
void setIn(str S) { freopen(S.c_str(),"r",stdin); }
void setOut(str S) { freopen(S.c_str(),"w",stdout); }
void unsyncIO() { cin.tie(0)->sync_with_stdio(0); }
void setIO(str S = "") {
	unsyncIO();
	// cin.exceptions(cin.failbit); 
	// throws exception when do smth illegal
	// ex. try to read letter into int
	if (sz(S)) { setIn(S+".in"), setOut(S+".out"); } // for USACO
}

using T = int;
using P = pair<T,T>;
using vP = vector<P>;

vP V;
vector<pair<int,P>> cV;

pair<P,P> solve(vP v) {
	ld h = INF; pair<P,P> bes; 
	set<P> S; int ind = 0;
	sort(all(v));
	F0R(i,sz(v)) {
		if (i-1 >= 0 && v[i] == v[i-1]) return {v[i],v[i-1]};
		for (; v[i].f-v[ind].f >= h; ++ind) 
			S.erase({v[ind].s,v[ind].f});
		for (auto it = S.ub({v[i].s-h,INF}); it != end(S) && it->f < v[i].s+h; ++it) {
			P t = {it->s,it->f};
			
			int dx = t.f-v[i].f, dy = t.s-v[i].s;
			ld dist = sqrt(dx*dx+dy*dy);

			if (dist < h) {
				h = dist;
				bes = {t,v[i]};
			}
		}

		S.ins({v[i].s,v[i].f});
	}
	return bes;
}

ld distE(P a, P b) {
	ld dx = a.f-b.f, dy = a.s-b.s;
	return sqrt(dx*dx+dy*dy);
}

int32_t main() { 
	setIO(); cout.precision(6); cout << fixed;

	int N; cin >> N;

	for(int i = 1; i <= N; i++) {
		int a, b; cin >> a >> b;
 
		V.pb(make_pair(a, b));
		cV.pb(mp(i,mp(a,b)));
	}

	auto sol = solve(V);

	pi res = {-1,-1};
	F0R(i,sz(V)) {
		if (V[i] == sol.f) {
			res.f = i;
		}

		if (V[i] == sol.s && res.f != i) {
			res.s = i;
		}
	}

	assert(res.f != res.s);

	if (res.f > res.s) swap(res.f,res.s);

	cout << res.f << " " << res.s << " " << distE(sol.f,sol.s) << "\n";

}
