/*
https://lightoj.com/problem/digit-count

Given a set of digits S, and an integer n, you have to find how many n-digit integers are there, which contain digits that belong to S and the difference between any two adjacent digits is not more than two.

Input
Input starts with an integer T (≤ 300), denoting the number of test cases.

Each case contains two integers, m (1 ≤ m < 10) and n (1 ≤ n ≤ 10). The next line will contain m integers (from 1 to 9) separated by spaces. These integers form the set S as described above. These integers will be distinct and given in ascending order.

Output
For each case, print the case number and the number of valid n-digit integers in a single line.

Sample
Input	Output
3
3 2
1 3 6
3 2
1 2 3
3 3
1 4 6

Case 1: 5
Case 2: 9
Case 3: 9

Notes
For the first case the valid integers are

11
13
31
33
66
*/

//By Forte11
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))

int dp[15][15];
bool B[15];

int N, M;

void clean(){
    memset(B, false, sizeof(B));
    memset(B, false, sizeof(B));
    memset(dp, false, sizeof(dp));
    return;
}

int main()
{
//    ios_base::sync_with_stdio(0);
//    cin.tie(0); cout.tie(0);

    int T; scanf("%d", & T);

    cik(t, 1, T, 1){
        scanf("%d%d", &N, &M);

        int C = 0;

        cik(i, 1, N, 1){
            int a; scanf("%d", &a);

            if(!B[a]){
                B[a] = true;
                dp[1][a] = 1;
            }
        }
        cik(i, 2, M, 1){
            cik(j, 1, 9, 1){
                if(B[j]){
                    cik(k, max(1, j - 2), min(9, j + 2), 1){
                        dp[i][j] += dp[i - 1][k];
                    }
                }
            }
        }

        int Sol = 0;
        cik(i, 1, 9, 1){
            Sol += dp[M][i];
        }

        printf("Case %d: %d\n", t, Sol);

        clean();
    }

    return 0;
}
