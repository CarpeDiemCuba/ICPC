/*
https://lightoj.com/problem/old-sorting

In a strange shop there are n types of coins of value A1, A2 ... An. C1, C2, ... Cn denote the number of coins of value A1, A2 ... An respectively. You have to find the number of different values (from 1 to m), which can be produced using these coins.

Input
Input starts with an integer T (≤ 20), denoting the number of test cases.

Each case starts with a line containing two integers n (1 ≤ n ≤ 100), m (0 ≤ m ≤ 105). The next line contains 2n integers, denoting A1, A2 ... An, C1, C2 ... Cn (1 ≤ Ai ≤ 105, 1 ≤ Ci ≤ 1000). All Ai will be distinct.

Output
For each case, print the case number and the result.

Sample
Input	Output
2
3 10
1 2 4 2 1 1
2 5
1 4 2 1

Case 1: 8
Case 2: 4
*/

//By Forte11
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))

const int maxn = 105;

int A[maxn];

int N, sol;

void solve(){
    cik(i, 1, N, 1){
        cik(j, i + 1, N, 1){
            if(A[i] == j && A[j] == i){
                swap(A[i], A[j]);
                sol++;
            }
        }
    }

    cik(i, 1, N, 1){
        cik(j, 1, N, 1){
            if(i == A[j] && i != j){
                swap(A[i], A[j]);
                sol++;
                break;
            }
        }
    }

    return;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    int T; cin >> T;
    cik(t, 1, T, 1){
        cin >> N;
        cik(i, 1, N, 1){
            cin >> A[i];
        }

        solve();

        cout << "Case " << t << ": " << sol << "\n";

        sol = 0;
    }

    return 0;
}
