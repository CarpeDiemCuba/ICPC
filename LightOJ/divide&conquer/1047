/*
https://lightoj.com/problem/neighbor-house

The people of Mohammadpur have decided to paint each of their houses red, green, or blue. They've also decided that no two neighboring houses will be painted the same color. The neighbors of house i are houses i-1 and i+1. The first and last houses are not neighbors.

You will be given the information of houses. Each house will contain three integers "R G B" (quotes for clarity only), where R, G and B are the costs of painting the corresponding house red, green, and blue, respectively. Return the minimal total cost required to perform the work.

Input
Input starts with an integer T (≤ 100), denoting the number of test cases.

Each case begins with a blank line and an integer n (1 ≤ n ≤ 20) denoting the number of houses. Each of the next n lines will contain 3 integers "R G B". These integers will lie in the range [1, 1000].

Output
For each case of input you have to print the case number and the minimal cost.

Sample
Input	Output
2

4
13 23 12
77 36 64
44 89 76
31 78 45

3
26 40 83
49 60 57
13 89 99

Case 1: 137
Case 2: 96
*/

//By Forte11
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define mn(a, b) ((a) < (b) ? (a) : (b))

const int maxn = 25;

int A[maxn][5], dp[maxn][5];

int main()
{
    int T; scanf("%d", &T);

    cik(t, 1, T, 1){
        int N; scanf("%d", &N);

        cik(i, 1, N, 1){
            scanf("%d%d%d", &A[i][1], &A[i][2], &A[i][3]);
        }

        cik(i, 1, 3, 1){
            dp[1][i] = A[1][i];
        }
        cik(i, 2, N, 1){
            cik(j, 1, 3, 1){
                int mini = 1e9;
                cik(k, 1, 3, 1){
                    if(j != k){
                        mini = mn(mini, dp[i - 1][k] + A[i][j]);
                    }
                }

                dp[i][j] = mini;
            }
        }

        cout << "Case " << t << ": "
            << mn(dp[N][1], mn(dp[N][2], dp[N][3])) << "\n";
    }

    return 0;
}
