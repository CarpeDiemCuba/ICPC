/*
Marriage Media

You run a marriage media. You take some profiles for men and women, and your task is to arrange as much marriages as you can. But after reading their bio-data you have found the following criteria.

No man will marry a woman if their height gap is greater than 12 inches.
No woman will marry a man if their age gap is greater than 5 years.
A couple can be formed if either both are not divorced or both are divorced.
Of course, a man can marry a single woman and vice versa.
Now you are given the bio-data of some men and women, you have to arrange the maximum number of marriages considering the given criteria.

Input
Input starts with an integer T (≤ 200), denoting the number of test cases.

Each case contains two integer m, n (1 ≤ m, n ≤ 50). Each of the next m lines will contain the information for a man, and each of the next n lines will contain the information for a woman. An information will contain three integers denoting the height in inches, age in years and 1 or 0 depending on they are divorced or not respectively. Assume that Height will be between 50 and 80, age will be between 20 and 50.

Output
For each case, print the case number and the maximum number of marriages you can arrange.

Sample
Input	Output
2
2 2
70 30 0
60 20 0
71 25 0
71 35 0
1 1
70 30 1
70 30 0

Case 1: 2
Case 2: 0
*/
//By Forte11
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define ll long long
#define ull unsigned long long
#define bi pair<int, int>
#define f first
#define s second
#define mkp make_pair

const int maxn = 105;
const int nil = 0;
const int oo = (1 << 28);

int mm[maxn], d[maxn];
vector<int> Adlist[maxn];

int H[maxn], Y[maxn], D[maxn];

int N, M;

void clean(){
    cik(i, 1, maxn - 5, 1){
        Adlist[i].clear();
        mm[i] = 0; d[i] = 0;
    }
    return;
}

bool bfs(){
    int u, v, len;
    queue<int> Q;
    for(int i = 1; i <= N; i++){
        if(mm[i] == nil){
            d[i] = 0;
            Q.push(i);
        }
        else{
            d[i] = oo;
        }
    }

    d[nil] = oo;
    while(!Q.empty()){
        u = Q.front();
        Q.pop();

        if(u != nil){
            len = Adlist[u].size() - 1;
            cik(i, 0, len, 1){
                v = Adlist[u][i];
                if(d[mm[v]] == oo){
                    d[mm[v]] = d[u] + 1;
                    Q.push(mm[v]);
                }
            }
        }
    }
    return (d[nil] != oo);
}

bool dfs(int u){
    int v, len;
    if(u != nil){
        len = Adlist[u].size() - 1;
        cik(i, 0, len, 1){
            v = Adlist[u][i];

            if(d[mm[v]] == d[u] + 1){
                if(dfs(mm[v])){
                    mm[v] = u;
                    mm[u] = v;
                    return true;
                }
            }
        }
        d[u] = oo;
        return false;
    }
    return true;
}

int hopcroft_karp(){
    int matching = 0;
    while(bfs()){
        cik(i, 1, N, 1){
            if(mm[i] == nil && dfs(i)){
                matching++;
            }
        }
    }
    return matching;
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int T; scanf("%d", &T);

    cik(t, 1, T, 1){
        scanf("%d%d", &N, &M);

        cik(i, 1, N + M, 1){
            scanf("%d%d%d", &H[i], &Y[i], &D[i]);
        }

        cik(i, 1, N, 1){
            cik(j, N + 1, N + M, 1){
                if(abs(H[i] - H[j]) <= 12){
                    if(abs(Y[i] - Y[j]) <= 5){
                        if(D[i] == D[j]){
                            Adlist[i].push_back(j);
                            Adlist[j].push_back(i);
                        }
                    }
                }
            }
        }

        printf("Case %d: %d\n", t, hopcroft_karp());

        clean();
    }


    return 0;
}

