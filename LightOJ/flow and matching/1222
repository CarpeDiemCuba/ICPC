/*
Gift Packing
There are n gifts and n boxes, each box can contain at most one gift. Now you want to pack all the gifts in the boxes such that your profit is as high possible.

The boxes are numbered from 1 to n and the gifts are numbered from 1 to n. You will be given an (n x n) matrix where pij denotes the profit if we put the ith gift into the jth box. Now your task is to pack all the gifts and maximize the profit.

Input
Input starts with an integer T (≤ 100), denoting the number of test cases.

Each case starts with a line containing an integer n (1 ≤ n ≤ 50). Each of the next n lines contains n space separated integers forming the matrix. The values in the matrix lie in the range [0, 1000].

Output
For each case, print the case number and the maximum profit.

Sample
Input	Output
2
2
4 3
3 1
3
1 4 5
5 7 6
5 8 8

Case 1: 6
Case 2: 18
*/

#include<bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))

struct Edge
{
    int from, to, capacity, cost;

    Edge(int a, int b, int c, int d){
        from = a; to = b; capacity = d; cost = c;
    }
};
vector<vector<int> > adj, cost, capacity;

const int INF = 1e9;

void shortest_paths(int n, int v0, vector<int>& d, vector<int>& p) {
    d.assign(n, INF);
    d[v0] = 0;
    vector<int> m(n, 2);
    deque<int> q;
    q.push_back(v0);
    p.assign(n, -1);

    while (!q.empty()) {
        int u = q.front();
        q.pop_front();
        m[u] = 0;
        for (int v : adj[u]) {
            if (capacity[u][v] > 0 && d[v] > d[u] + cost[u][v]) {
                d[v] = d[u] + cost[u][v];
                p[v] = u;
                if (m[v] == 2) {
                    m[v] = 1;
                    q.push_back(v);
                } else if (m[v] == 0) {
                    m[v] = 1;
                    q.push_front(v);
                }
            }
        }
    }
}

int min_cost_flow(int N, vector<Edge> edges, int K, int s, int t) {
    adj.assign(N, vector<int>());
    cost.assign(N, vector<int>(N, 0));
    capacity.assign(N, vector<int>(N, 0));
    for (Edge e : edges) {
        adj[e.from].push_back(e.to);
        adj[e.to].push_back(e.from);
        cost[e.from][e.to] = e.cost;
        cost[e.to][e.from] = -e.cost;
        capacity[e.from][e.to] = e.capacity;
    }

    int flow = 0;
    int cost = 0;
    vector<int> d, p;
    while (flow < K) {
        shortest_paths(N, s, d, p);
        if (d[t] == INF)
            break;

        // find max flow on that path
        int f = K - flow;
        int cur = t;
        while (cur != s) {
            f = min(f, capacity[p[cur]][cur]);
            cur = p[cur];
        }

        // apply flow
        flow += f;
        cost += f * d[t];
        cur = t;
        while (cur != s) {
            capacity[p[cur]][cur] -= f;
            capacity[cur][p[cur]] += f;
            cur = p[cur];
        }
    }

    if (flow < K)
        return -1;
    else
        return cost;
}

void init(){
    adj.clear();cost.clear(); capacity.clear();
}

 main(){
//ios_base::sync_with_stdio(0); cin.tie(0);

//    freopen(".in", "r", stdin);

    int T; scanf("%d", &T);

    cik(t,1 , T, 1){vector<Edge> edges;

    init();
        int N;scanf("%d", &N);
        cik(i, 1, N, 1){
            cik(j, 1, N, 1){
                int a;  scanf("%d", &a);
                edges.push_back(Edge(i, j + N, -a, 1));
            }
        }

        cik(i, 1, N, 1){
            edges.push_back(Edge(0, i, 0, 1));
        }
        cik(i, 1, N, 1){
            edges.push_back(Edge(i + N, N + N + 1, 0, 1));
        }
        int sol = min_cost_flow(N + N + 2, edges, N, 0, N + N + 1);
        printf("Case %d: %d\n", t, -sol);
    }
}
