/*
Karate Competition
Your karate club challenged another karate club in your town. Each club enters N players into the match, and each player plays one game against a player from the other team. Each game that is won is worth 2 points, and each game that is drawn is worth 1 point. Your goal is to score as many points as possible.

Your secret agents have determined the skill of every member of the opposing team, and of course you know the skill of every member of your own team. You can use this information to decide which opposing player will play against each of your players in order to maximize your score. Assume that the player with the higher skill in a game will always win, and if the players have the same skill then they will draw.

You will be given the skills of your players and of the opposing players, you have to find the maximum number of points that your team can score.

Input
Input starts with an integer T (≤ 70), denoting the number of test cases.

Each case starts with a line containing an integer N (1 ≤ N ≤ 50). The next line contains N space separated integers denoting the skills of the players of your team. The next line also contains N space separated integers denoting the skills of the players of the opposite team. Each of the skills lies in the range [1, 1000].

Output
For each case, print the case number and the maximum number of points your team can score.

Sample
Input	Output
4
2
4 7
6 2
2
6 2
4 7
3
5 10 1
5 10 1
4
10 7 1 4
15 3 8 7

Click to copy
Case 1: 4
Case 2: 2
Case 3: 4
Case 4: 5
*/

//By Forte11
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))

const int maxn = 55;
const int big = 1e9;

int A[maxn], B[maxn], M[maxn][maxn];
int n;

int hungarian(){
	int p, q, xx, yy;

	vector<int> fx(n, big), fy(n, 0);
	vector<int> x(n, -1), y(n, -1);
	cik(i, 0, n - 1, 0){
		vector<int> t(n, -1), s(n + 1, i);

		for(int p = q = 0; p <= q && x[i] < 0; ++p){
			for(int k = s[p], j = 0;  j < n && x[i] < 0; ++j){
				if(fx[k] + fy[j] == M[k][j] && t[j] < 0){
					s[++q] = y[j], t[j] = k;
					if(s[q] < 0){
						for(p = j; p >= 0; j = p){
							y[j] = k = t[j], p = x[k], x[k] = j;
						}
					}
				}
			}
		}

		if(x[i] < 0){
			yy = big;
			for(int k = 0;  k <= q; ++k){
				for(int j = 0; j < n; ++j){
					if(t[j] < 0){
						yy = min(yy, (fx[s[k]] + fy[j] - M[s[k]][j]));
					}
				}
			}

			for(int j = 0; j < n; ++j){
				fy[j] += (t[j] < 0 ? 0 : yy);
			}
			for(int k = 0; k <= q; ++k){
				fx[s[k]] -= yy;
			}
		}
		else{
			++i;
		}
	}
	xx = 0;
	for(int i = 0; i < n; ++i){
		xx += M[i][x[i]];
	}
	return xx;
}


void clean(){
	cik(i, 0, n, 1){
		cik(j, 0, n, 1){
			M[i][j] = 0;
		}
	}
	return;
}

int main() {
	int T; scanf("%d", &T);

	cik(t, 1, T, 1){
		scanf("%d", &n);

		cik(i, 0, n - 1, 1){
			scanf("%d", &A[i]);
		}
		cik(i, 0, n - 1, 1){
			scanf("%d", &B[i]);
		}

		cik(i, 0, n - 1, 1){
			cik(j, 0, n - 1, 1){
				if(A[i] > B[j]){
					M[i][j] = 2;
				}
				else if(A[i] == B[j]){
					M[i][j] = 1;
				}
			}
		}

		//////HUNGARO GUILLERMO/////////////
		printf("Case %d: %d\n", t, hungarian());

		clean();
	}
	return 0;
}
