/*
https://lightoj.com/problem/array-queries

Array Queries

Given an array with N elements, indexed from 1 to N. Now you will be given some queries in the form I J, your task is to find the minimum value from index I to J.

Input
Input starts with an integer T (≤ 5), denoting the number of test cases.

The first line of a case is a blank line. The next line contains two integers N (1 ≤ N ≤ 105), q (1 ≤ q ≤ 50000). The next line contains N space separated integers forming the array. There integers range in [0, 105].

The next q lines will contain a query which is in the form I J (1 ≤ I ≤ J ≤ N).

Output
For each test case, print the case number in a single line. Then for each query you have to print a line containing the minimum value between index I and J.

Sample
Input	Output
2

5 3
78 1 22 12 3
1 2
3 5
4 4

1 1
10
1 1

Case 1:
1
3
12
Case 2:
10

*/

//By Forte11
//1082 - Array Queries - Light OJ
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define mn(a, b) ((a) < (b) ? (a) : (b))

const int maxn = 1e5 + 5;
const int maxm = log2(maxn) + 5;

int RMQ[maxn][maxm];

int N, Q, a, b;

void build(){
    for(int j = 1; (1 << j) <= N; j++){
        for(int i = N - (1 << j) + 1; i; i--){
            RMQ[i][j] = mn(RMQ[i][j - 1], RMQ[i + (1 << (j - 1))][j - 1]);
        }
    }
    return;
}

int query(){
    int c = log2(b - a + 1);
    return mn(RMQ[a][c], RMQ[b - (1 << c) + 1][c]);
}

int main()
{
//    freopen(".in", "r", stdin);
//    freopen(".out", "w", stdout);

    int T; scanf("%d", &T);

    cik(t, 1, T, 1){
        scanf("%d%d", &N, &Q);

        cik(i, 1, N, 1){
            scanf("%d", &RMQ[i][0]);
        }
        build();

        printf("Case %d:\n", t);

        cik(i, 1, Q, 1){
            scanf("%d%d", &a, &b);
            printf("%d\n", query());
        }
    }

    return 0;
}

