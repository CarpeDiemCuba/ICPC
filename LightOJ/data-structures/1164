/*
https://lightoj.com/problem/horrible-queries

Horrible Queries

World is getting more evil and it's getting tougher to get into the Evil League of Evil. Since the legendary Bad Horse has retired, you have to correctly answer the evil questions of Dr. Horrible, who has a PhD in horribleness (but not in Computer Science).

You are given an array of n elements, which are initially all 0. After that you will be given q commands. They are:

0 x y v - you have to add v to all numbers in the range of x to y
1 x y - print a line containing a single integer which is the sum of all the array elements between x and y (inclusive).
The array is indexed from 0 to n - 1.

Input
Input starts with an integer T (≤ 5), denoting the number of test cases.

Each case contains two integers n (1 ≤ n ≤ 105) and q (1 ≤ q ≤ 50000). Each of the next q lines contains a task in one of the following form:

0 x y v (0 ≤ x ≤ y < n, 1 ≤ v ≤ 1000)
1 x y (0 ≤ x ≤ y < n)
Output
For each case, print the case number first. Then for each query 1 x y, print the sum of all the array elements between x and y.

Sample
Input	Output
2
10 5
0 0 9 10
1 1 6
0 3 7 2
0 4 5 1
1 5 5
20 3
0 10 12 1
1 11 12
1 19 19

Case 1:
60
13
Case 2:
2
0
*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define int long long

const int maxn = 1e5 + 5;

int SG[maxn * 4], LZ[maxn * 4];

int a, b, c;

void propaga(int nod, int ini, int fin){
    if(ini == fin){
        LZ[nod] = 0;
        return;
    }

    int mit = (ini + fin) >> 1;

    SG[nod << 1] += (mit - ini + 1) * LZ[nod];
    SG[(nod << 1) + 1] += (fin - mit) * LZ[nod];

    LZ[nod << 1] += LZ[nod];
    LZ[(nod << 1) + 1] += LZ[nod];

    LZ[nod] = 0;
    return;
}

void build(int nod, int ini, int fin){
    LZ[nod] = 0;
    if(ini == fin){
        SG[nod] = 0;
        return;
    }

    int mit = (ini + fin) >> 1;

    build(nod << 1, ini, mit);
    build((nod << 1) + 1, mit + 1, fin);

    SG[nod] = SG[nod << 1] + SG[(nod << 1) + 1];
    return;
}

void update(int nod, int ini, int fin){
    if(LZ[nod]){
        propaga(nod, ini, fin);
    }
    if(a > fin || ini > b){
        return ;
    }
    if(a <= ini && fin <= b){
        SG[nod] += (fin - ini + 1) * c;
        LZ[nod] += c;
        return;
    }

    int mit = (ini + fin) >> 1;

    update(nod << 1, ini, mit);
    update((nod << 1) + 1, mit + 1, fin);

    SG[nod] = SG[nod << 1] + SG[(nod << 1) + 1];
    return;
}

int query(int nod, int ini, int fin){
    if(LZ[nod]){
        propaga(nod, ini, fin);
    }

    if(a > fin || ini > b){
        return 0;
    }
    if(a <= ini && fin <= b){
        return SG[nod];
    }

    int mit = (ini + fin) >> 1;

    return query(nod << 1, ini, mit) + query((nod << 1) + 1, mit + 1, fin);
}

main()
{
    int T; scanf("%lld", &T);

    cik(t, 1, T, 1){
        int N, Q; scanf("%lld%lld", &N, &Q);

        build(1, 1, N);


        printf("Case %lld:\n", t);
        cik(i, 1, Q, 1){
            int op;
            scanf("%lld%lld%lld", &op, &a, &b);
            a++, b++;

            if(op){
                printf("%lld\n", query(1, 1, N));
            }
            else{
                scanf("%lld", &c);
                update(1, 1, N);
            }
        }
    }

    return 0;
}


