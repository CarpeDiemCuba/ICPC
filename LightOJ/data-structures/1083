/*
https://lightoj.com/problem/histogram

Histogram

A histogram is a polygon composed of a sequence of rectangles aligned at a common base line. The rectangles have equal widths but may have different heights. For example, the figure shows the histogram that consists of rectangles with the heights {2, 1, 4, 5, 1, 3, 3} measured in units where the width of the rectangles is 1.

Histogram

Usually, histograms are used to represent discrete distributions, e.g., the frequencies of characters in texts. Note that the order of the rectangles, i.e., their heights, is important. Calculate the area of the largest rectangle in a histogram that is aligned at the common base line, too. The figure on the right shows the largest aligned rectangle for the depicted histogram.

Input
Input starts with an integer T (≤ 20), denoting the number of test cases.

Each case contains a line with an integer N (1 ≤ N ≤ 30000) denoting the number of rectangles. The next line contains N space separated positive integers (≤ 30000) denoting the heights.

Output
For each case, print the case number and the largest rectangle that can be made.

Sample
Input	Output
2
7
2 1 4 5 1 3 3
5
4 4 3 2 4

Case 1: 8
Case 2: 10
*/

//By Forte11
#include <bits/stdc++.h>

using namespace std;

#define ll long long
#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define acik(i, a, b, c) for(int i =(a); i >=(b); i -=(c))
#define mx(a, b) ((a) > (b) ? (a) : (b))

const int maxn = 3e4 + 5;

int A[maxn], Izq[maxn], Der[maxn];
stack<int> S;

int main()
{
//    ios_base::sync_with_stdio(0);
//    cin.tie(0); cout.tie(0);

//    freopen(".in", "r", stdin);
//    freopen(".out", "w", stdout);

    int T; //cin >> T;
    scanf("%d", &T);

    cik(t, 1, T, 1){
        int N; //cin >> N;
        scanf("%d", &N);

        cik(i, 1, N, 1){
            //cin >> A[i];
            scanf("%d", &A[i]);
        }

        int n;

        while(!S.empty()){
            S.pop();
        }

        S.push(0);
        cik(i, 1, N, 1){
            n = A[i];

            while(A[S.top()] >= n){
                S.pop();
            }
            Izq[i] = S.top();

            S.push(i);
        }

        while(!S.empty()){
            S.pop();
        }

        A[N + 1] = 0;
        S.push(N + 1);

        acik(i, N, 1, 1){
            n = A[i];

            while(A[S.top()] >= n){
                S.pop();
            }
            Der[i] = S.top();
            S.push(i);
        }

        int Sol = 0;
        cik(i, 1, N, 1){
            Sol = mx(Sol, (Der[i] - Izq[i] - 1) * A[i]);
        }

        //cout << "Case " << t << ": " << Sol << "\n";
        printf("Case %d: %d\n", t, Sol);
    }

    return 0;
}
