/*
https://lightoj.com/problem/efficient-traffic-system

I was given the task to make all the major two way roads in Bangladesh into one way roads. And I have done that easily with some great pruning. And I asked the Govt. Traffic Management System to change the direction of all the roads.

But after some days, I realized that I should have thought of the fact that all cities should be reachable from other cities using the existing one way roads. Since the traffic system is already designed, so it may not be changed. But I can ask the govt. to build new roads between any pair of cities.

Now since the task looks quite hard for me, I am asking you to do it for me. I will give you the current roads configuration. You have to find the minimum number of roads that have to be built such that it's possible to go from any city to any other city.

Input
Input starts with an integer T (≤ 25), denoting the number of test cases.

Each case starts with a blank line. Next line contains two integers n (1 ≤ n ≤ 20000) and m (0 ≤ m ≤ 50000), where n denotes the number of cities and m denotes the number of one way roads. Each of the next m lines contains two integers u v (1 ≤ u, v ≤ n, u ≠ v) meaning that there is a road from u to v. Assume that there can be at most one road from a city u to v.

Output
For each case, print the case number and the minimum number of roads that have to be built.

Sample
Input	Output
2

3 0

3 2
1 2
1 3

Case 1: 3
Case 2: 2

Notes
Dataset is huge. Use faster I/O methods.
*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define bi pair<int, int>
#define f first
#define s second
#define mkp make_pair

const int maxn = 5e4 + 5;

vector<int> A, SCC, V1[maxn], V2[maxn];

bool B[maxn];
int C[maxn], INC[maxn], OUT[maxn];

void dfs(int nod){
    B[nod] = true;

    int len = V1[nod].size();
    cik(i, 0, len - 1, 1){
        int nn = V1[nod][i];
        if(!B[nn]) dfs(nn);
    }
    A.push_back(nod);
}

void dfs2(int nod){
    B[nod] = true;
    SCC.push_back(nod);

    int len = V2[nod].size();
    cik(i, 0, len - 1, 1){
        int nn = V2[nod][i];
        if(!B[nn]) dfs2(nn);
    }
}

void clean(){
    A.clear();
    SCC.clear();

    cik(i, 0, maxn - 5, 1){
        V1[i].clear();
        V2[i].clear();
    }

    memset(B, 0, sizeof(B));
    memset(C, 0, sizeof(C));
    memset(INC, 0, sizeof(INC));
    memset(OUT, 0, sizeof(OUT));
    return;
}

int main()
{
//    ios_base::sync_with_stdio(0); cin.tie(0);

//    freopen(".in", "r", stdin);

    int T; scanf("%d", &T);
    cik(t, 1, T, 1){
        int N, M; scanf("%d%d", &N, &M);

        cik(i, 1, M, 1){
            int a, b; scanf("%d%d", &a, &b);
            V1[a].push_back(b);
            V2[b].push_back(a);
        }

        cik(i, 1, N, 1){
            if(!B[i]) dfs(i);
        }

        memset(B, false, sizeof(B));
        reverse(A.begin(), A.end());

        int K = 0;
        cik(i, 0, N - 1, 1){
            if(!B[A[i]]){
                dfs2(A[i]);
                K++;
                cik(j, 0, SCC.size() - 1, 1){
                    C[SCC[j]] = K;
                }
                SCC.clear();
            }
        }

        cik(i, 1, N, 1){
            int len = V1[i].size();
            cik(j, 0, len - 1, 1){
                int nn = V1[i][j];

                if(C[i] != C[nn]){
                    INC[C[nn]]++;
                    OUT[C[i]]++;
                }
            }
        }

        printf("Case %d: ", t);

        if(K == 1) printf("0\n");

        else{
            int in = 0, out = 0;
            cik(i, 1, K, 1){
                if(!INC[i]) in++;
                if(!OUT[i]) out++;
            }
            printf("%d\n", max(in, out) );
        }
        clean();
    }

    return 0;
}
