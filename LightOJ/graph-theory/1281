/*
https://lightoj.com/problem/new-traffic-system

The country - Ajobdesh has a lot of problems in traffic system. As the Govt. is very clever (!), they made a plan to use only one way roads. Two cities s and t are the two most important cities in the country and mostly people travel from s to t. That's why the Govt. made a new plan to introduce some new one way roads in the traffic system such that the time to travel from s to t is reduced.

But since their budget is short, they can't construct more than d roads. So, they want to construct at most d new roads such that it becomes possible to reach t from s in shorter time. Unluckily you are one living in the country and you are assigned this task. That means you will be given the existing roads and the proposed new roads, you have to find the best path from s to t, which may allow at most d newly proposed roads.

Input
Input starts with an integer T (≤ 30), denoting the number of test cases.

Each case starts with a line containing four integers n (2 ≤ n ≤ 10000), m (0 ≤ m ≤ 20000), k (0 ≤ k ≤ 10000), d (0 ≤ d ≤ 10) where n denotes the number of cities, m denotes the number of existing roads and k denotes the number of proposed new roads. The cities are numbered from 0 to n-1 and city 0 is denoted as s and city (n-1) is denoted as t.

Each of the next m lines contains a description of a road, which contains three integers ui vi wi (0 ≤ ui, vi < n, ui ≠ vi, 1 ≤ wi ≤ 1000) meaning that there is a road from ui to vi and it takes wi minutes to travel in the road. There is at most one road from one city to another city.

Each of the next k lines contains a proposed new road with three integers ui vi wi (0 ≤ ui, vi < n, ui ≠ vi 1 ≤ wi ≤ 1000) meaning that the road will be from ui to vi and it will take wi minutes to travel in the road. There can be at most one proposed road from one city to another city.

Output
For each case, print the case number and the shortest path cost from s to t or Impossible if there is no path from s to t.

Sample
Input	Output
2
4 2 2 2
0 1 10
1 3 20
0 2 5
2 3 14
2 0 1 0
0 1 100

Case 1: 19
Case 2: Impossible

*/

//By Forte11
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define bi pair<int, int>
#define tri pair<bi, int>
#define f first
#define s second
#define mkp make_pair

const int maxn = 1e4 + 5;

vector<tri > Adlist[maxn];
int C[maxn][15];

int N, M, K, D;

void clean(){
    cik(i, 0, N, 1){
        Adlist[i].clear();
        cik(j, 0, D, 1){
            C[i][j] = 0;
        }
    }
    return;
}

void Dijkstra(){
    priority_queue<tri, vector<tri >, greater<tri > > Q;

    Q.push(mkp(mkp(0, 0), 0));

    while(!Q.empty()){
        int cost = Q.top().f.f;
        int nod = Q.top().f.s;
        int d = Q.top().s;
        Q.pop();

        if(C[nod][d]){
            continue;
        }
        C[nod][d] = cost;

        int lon = Adlist[nod].size() - 1;

        cik(i, 0, lon, 1){
            int ncost = cost + Adlist[nod][i].f.f;
            int nn = Adlist[nod][i].f.s;
            int nd = Adlist[nod][i].s + d;

            if(nd > D){
                continue;
            }

            if(!C[nn][nd]){
                Q.push(mkp(mkp(ncost, nn), nd));
            }
        }
    }
    return;
}

int main()
{
//    freopen(".in", "r", stdin);

    int T; scanf("%d", &T);

    cik(t, 1, T, 1){
        scanf("%d%d%d%d", &N, &M, &K, &D);

        cik(i, 1, M, 1){
            int a, b, c; scanf("%d%d%d", &a, &b, &c);
            Adlist[a].push_back(mkp(mkp(c, b), 0));
        }
        cik(i, 1, K, 1){
            int a, b, c; scanf("%d%d%d", &a, &b, &c);
            Adlist[a].push_back(mkp(mkp(c, b), 1));
        }

        Dijkstra();

        int Sol =  1e9;

        cik(i, 0, D, 1){
            if(C[N - 1][i]){
                Sol = min(Sol, C[N - 1][i]);
            }
        }

        if(Sol != 1e9){
            printf("Case %d: %d\n", t, Sol);
        }
        else{
            printf("Case %d: Impossible\n", t);
        }
        clean();
    }
    return 0;
}
