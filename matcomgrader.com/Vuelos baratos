/*
https://matcomgrader.com/problem/9477/vuelos-baratos/

La compañía de aviación de Ryan ofrece sus servicios en N ciudades importantes del mundo. Se enorgullece sobremanera de la calidad de sus ofertas y de sus precios tan bajos.



Actualmente ofrece N−1 vuelos de forma tal que se puede viajar entre todo par de ciudades tomando varios de ellos. El próximo plan de la compañía es crear un vuelo directo entre todo par de ciudades que no tengan uno hasta el momento. Uno de los objetivos es mantener los precios bajos y por tanto se quiere que la suma de los precios de todos los vuelos sea mínima, aunque en ningún caso el precio de un vuelo ya existente se modificará. Una restricción importante, que piensa cumplir la empresa, para evitar que los precios bajen demasiado, es escoger estos de forma tal que todo subconjunto de N−1 vuelos, donde al menos uno de ellos es nuevo y que permita viajar entre cualquier par de ciudades ha de tener una suma de precios mayor que la suma de los precios de los vuelos actuales.
Input
La primera línea de la entrada es un entero N (2≤N≤100000) que indica la cantidad de ciudades. Las siguientes N−1 líneas describen los vuelos que ofrece la compañía en estos momentos. Cada vuelo se describe con tres enteros A (1≤A≤N), B (1≤B≤N) y C  (0≤C≤10000) que representan respectivamente las ciudades que conecta y el costo del pasaje. Todos los precios son enteros, incluidos los de aquellos que piensan agregarse.
Output
La salida debe ser un número entero que representa la menor suma de los precios de todos los vuelos teniendo en cuenta las restricciones planteadas.
Sample test(s)
input
3
1 2 1
1 3 2
output
6
*/

//By Forte11z
#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define ll long long
#define ull unsigned long long
#define bi pair<int, int>
#define tri pair<ll, bi >
#define f first
#define s second
#define mkp make_pair

const int maxn = 1e5 + 5;

ll cant[maxn], p[maxn];

void union_set(int a, int b){
    if(cant[a] < cant[b]){
        p[a] = p[b];
        cant[b] += cant[a];
    }
    else{
        p[b] = p[a];
        cant[a] += cant[b];
    }
    return;
}

int find_comp(int a){
    if(p[a] == a){
        return a;
    }
    p[a] = find_comp(p[a]);
    return p[a];
}

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    priority_queue<tri, vector<tri >, greater<tri > > Q;

    int N; cin >> N;

    cik(i, 2, N, 1){
        int a, b, c; cin >> a >> b >> c;

        Q.push(mkp(c, mkp(a, b)));
    }

    cik(i, 1, N, 1){
        p[i] = i;
        cant[i] = 1;
    }

    ll Sol = 0;
    while(!Q.empty()){
        ll cost = Q.top().f;
        int n1 = Q.top().s.f;
        int n2 = Q.top().s.s;
        Q.pop();

        Sol += cost;


        int k1 = find_comp(n1);
        int k2 = find_comp(n2);

        if(k1 != k2){
            Sol += (cant[k1] * cant[k2]) * (cost + 1ll);
            Sol -= (cost + 1ll);
            union_set(k1, k2);
        }
    }

    cout << Sol << "\n";

    return 0;
}
