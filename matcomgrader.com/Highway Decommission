/*
https://matcomgrader.com/problem/9549/highway-decommission/

Nlogonia’s government is eager to cut down public debt. One of the measures about to take place is the decommission of some highways as most of them incur a high maintenance cost. Each highway connects two different cities and can be traveled in both directions. Using the existing highways it is possible to reach any city from any other city.

Government promises that the impact of the decommission will be minimal in the lives of Nlogonians. In particular they guarantee that after the decommission, for each city the minimum distance needed to travel from that city to the capital of the country will remain the same as it is now, when all the highways can be used.

The Department of Roads of Nlogonia believes that interns are not there just to get coffees or run errands but should do meaningful work instead and that’s why you are assigned the following task. Given the length and maintenance cost of each highway, you must decide which highways will be kept active and which will be decommissioned. As you might guess, the sum of maintenance costs for the remaining highways must be minimum.

Input
The first line contains two integers N (2≤N≤104) and M (1≤M≤105), indicating respectively the number of cities and the number of highways. Cities are identified by distinct integers from 1 to N, where city 1 is the capital of Nlogonia. Each of the following M lines describes a highway with four integers A, B, L and C (1≤A,B≤N, A≠B and 1≤L,C≤109), indicating that there is a highway between cities A and B that has length L and maintenance cost C. Using the existing highways it is possible to reach any city from any other city.
Output
Output a single line with an integer indicating the minimum possible sum of maintenance costs for a set of highways to be kept active. This set of highways must ensure that for each city the minimum distance needed to travel from that city to the capital of Nlogonia remains the same using only those highways.
Sample test(s)
input
3 4
2 3 2 4
2 3 2 2
1 2 5 1
1 3 1 4
output
6
input
2 2
1 2 10 5
2 1 6 11
output
11
*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i, a, b, c) for(int i =(a); i <=(b); i +=(c))
#define int long long
#define bi pair<int, int>
#define tri pair<int, bi >
#define mkp make_pair
#define f first
#define s second

const int maxn = 1e5 + 5;

vector<tri > V[maxn];

bool B[maxn];
int C[maxn];

void Dijkstra(){
    priority_queue<bi, vector<bi >, greater<bi > >Q;
    Q.push(mkp(0, 1));

    while(!Q.empty()){
        int cost = Q.top().f;
        int nod = Q.top().s;
        Q.pop();

        if(B[nod]) continue;
        B[nod] = true;
        C[nod] = cost;

        int len = V[nod].size() ;
        cik(i, 0, len - 1, 1){
            int nn = V[nod][i].f;
            int ncost = V[nod][i].s.f + cost;

            if(!B[nn]){
                Q.push(mkp(ncost, nn));
            }
        }
    }return;
}



main()
{
    ios_base::sync_with_stdio(0); cin.tie(0);


    int N, M; cin >> N >> M; cik(i, 1, M, 1){
        int a, b, c, d; cin >> a >> b >> c >> d;
        V[a].push_back(mkp(b, mkp(c, d)));
        V[b].push_back(mkp(a, mkp(c, d)));
    }

    Dijkstra();

    vector<bi > tree;

    cik(i, 1, N, 1){
        int len = V[i].size() ;
        cik(j, 0, len - 1, 1){
            int nn = V[i][j].f;
            int ncost = V[i][j].s.f;
            int nval = V[i][j].s.s;

            if(C[i] + ncost == C[nn]){
                tree.push_back(mkp(nval, nn));
            }
        }
    }

    sort(tree.begin(), tree.end());

    memset(B, 0 ,sizeof(B));

    int Sol = 0;
    int len = tree.size();
    cik(i, 0, len - 1, 1){
        int nod = tree[i].s;
        int ncost= tree[i].f;

        if(!B[nod]){
            Sol += ncost;
            B[nod] = true;
        }
    }cout << Sol << "\n";


    return 0;
}
