/*
https://matcomgrader.com/problem/9278/lucky-chances/

Lucky Chances is a lottery game. Each lottery ticket has a play field and a scratch area. The play field is a rectangular r×c field filled with numbers. The scratch area hides row and column numbers that specify the bet cell.

There are four possible winning directions: up, down, left and right. You win a direction if all numbers in this direction from the bet cell are strictly less than a number in the bet cell. And if the bet cell is on the edge of the grid, you win the corresponding direction automatically!



Larry wants to choose the ticket that has maximum total number of winning directions for all possible bet cells. Write a program that determines this number for the given grid.
Input
The first line of the input file contains two integers r and c — the number of rows and columns in the grid (1≤r,c≤100).

The following r lines contain c integers each — the numbers printed on the grid. Each number is positive and does not exceed 1000.
Output
Output a single integer w — the total number of winning directions for the given grid.
Sample test(s)
input
3 4

5 3 9 10

1 8 8 2

4 3 4 3

output
25

*/

#include <bits/stdc++.h>

using namespace std;

#define cik(i,a , b, c) for(int i =(a); i <=(b); i +=(c))

const int maxn = 1e2 + 5;

int A[maxn][maxn], der[maxn][maxn], izq[maxn][maxn], arr[maxn][maxn], aba[maxn][maxn];

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);

    int R, C; cin >> R >> C;

    cik(i, 1, R, 1){
        cik(j, 1, C, 1){
            cin >> A[i][j];
        }
    }

    cik(i, 1, R, 1){
        cik(j, 1, C, 1){
            //derecha
            cik(k, 1, j - 1, 1){
                der[i][j] = max(der[i][j], A[i][k]);
            }
            //izquierda
            cik(k, j + 1, C, 1){
                izq[i][j] = max(izq[i][j], A[i][k]);
            }
            //arr
            cik(k, 1, i - 1, 1){
                arr[i][j] = max(arr[i][j], A[k][j]);
            }
            //aba
            cik(k, i + 1, R, 1){
                aba[i][j] = max(aba[i][j], A[k][j]);
            }
        }
    }

    int Sol = 0;

    cik(i, 1, R, 1){
        cik(j, 1, C, 1){
            if(A[i][j] > der[i][j])
            {
                Sol++;
            }
            if(A[i][j] >izq[i][j] )
            {
                Sol++;
            }
            if(A[i][j] >arr[i][j] )
            {
                Sol++;
            }
            if(A[i][j] >aba[i][j] )
            {
                Sol++;
            }
        }
    }

    cout << Sol << "\n";


    return 0;
}
